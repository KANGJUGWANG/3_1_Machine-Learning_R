## 변동성 측정
# Q1,Q2,Q3
quantile(c(1,2,3,4,5), 0.25)
## 변동성 측정
# Q1,Q2,Q3
quantile(c(1,2,3,4,5), 0.25)
quantile(c(1,2,3,4,5), 0.5)
quantile(c(1,2,3,4,5), 0.75)
# 분산
sd(c(1,2,3,4,5))
# 표준편차
var(c(1,2,3,4,5))
# 분산
x<-sd(c(1,2,3,4,5))
sqrt(x)
# 표준편차
x<-var(c(1,2,3,4,5))
sqrt(x)
str(c(1,2,3,4,5))
# 중심경양 분포 요약
summary(c(1,2,3,4,5))
## 함수 정리
# x<-1 <<- 스칼라
# x<-c(1,2,3) <<- 벡터
# x<- matrix() <<- 행렬
# x<- array() <<- 배열
# x<- list
# summary(x) <<-
x<-[1,3,4]
## 함수 정리
# x<-1 <<- 스칼라
# x<-c(1,2,3) <<- 벡터
# x<- matrix() <<- 행렬
# x<- array() <<- 배열
# x<- list
# summary(x) <<-
x<-list(13,4)
typeof(x)
candy_data <- data.frame(
Color = c("Red","Blue","Green"),
Observd = c(30, 50, 20));candy_data
total_candies <- sum(candy_data$Observd);print(total_candies)
expected<-rep(total_candies/3,3);print(expected)
test_result <- chisq.test(candy_data$Observd, p=expected/sum(expected))
print(test_result)
## 실습(적합도 검정)
#datas <- read.csv("C:/Users/PC502/Downloads/국경통과데이터(명목 2).csv", skip = 2)
# local
datas <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터국경통과데이터(명목 2).csv", skip = 2)
## 실습(적합도 검정)
#datas <- read.csv("C:/Users/PC502/Downloads/국경통과데이터(명목 2).csv", skip = 2)
# local
datas <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/국경통과데이터(명목 2).csv", skip = 2)
datas
observed <- table(datas$US.Canada.Border,datas$Maine)
observed
expected <-rep(sum(observed)/length(observed),length(observed));expected
test_result <- chisq.test(x = observed, p=expected/sum(expected))
print(test_result)
observed  <- matrix(c(25,15,20,30,35,25,15,20,15), nrow =3, byrow =TRUE)
rownames(observed) <-c("Red", "Blue", "Green")
rownames(observed) <-c("Red", "Blue", "Green")
chi_squared <- chisq.test(observed)
print(chi_squared)
# ex 2) 성별에 따라서 좋아하는 음식은 서로 관련성이 있다? 없다?
data <- data.frame(Gender = c("Male", "Female","Male","Male","Female","Female","Male","Male","Female","Female"), Food = c("국밥", "마라탕", "국밥","피자","피자","국밥","국밥","마라탕","피자","피자"))
cross_tab <-table(data$Gender, data$Food)
cross_tab
print(chi_square_test_result)
chi_square_test_result <-chisq.test(cross_tab)
print(chi_square_test_result)
df <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/gender_food.csv")
df
# ex 2) 성별에 따라서 좋아하는 음식은 서로 관련성이 있다? 없다?
data <- data.frame(Gender = c("Male", "Female","Male","Male","Female","Female","Male","Male","Female","Female"), Food = c("국밥", "마라탕", "국밥","피자","피자","국밥","국밥","마라탕","피자","피자"))
cross_tab <-table(data$Gender, data$Food)
cross_tab
df
g_f_tab <- table(df$Gender, df$Food)
chi_s_test <- chisq.test(g_f_tab)
print(chi_s_test)
df <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/gender_food.csv")
g_f_tab <- table(df$Gender, df$Food)
chi_s_test <- chisq.test(g_f_tab)
print(chi_s_test)
#독립성 검정의 사후검정
library(chisq.posthoc.test)
library(chisq.posthoc.test)
#독립성 검정의 사후검정
install.packages("chisq.posthoc.test")
library(chisq.posthoc.test)
data<- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/gender_food.csv")
cross_tab <- table(data$Gender, data$Food)
cross_tab
rewults<- chisq.posthoc.test(cross_tab, method = "bonferroni")
results
results<- chisq.posthoc.test(cross_tab, method = "bonferroni")
results
chooose(n,k)
chooose(3,2)
choose(3,2)
table(data$Gender, data$Food)
# 성별과 음식의 독립성을 사후검정결과
# 국밥과 피자는 귀무가설을 기각하며, 마라탕은 대립가설을 기각한다.
# 마라탕과 성별은 독립이며 국밥, 피자는 성별과 독립이 아니다.
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/housetasks.csv")
# 성별과 음식의 독립성을 사후검정결과
# 국밥과 피자는 귀무가설을 기각하며, 마라탕은 대립가설을 기각한다.
# 마라탕과 성별은 독립이며 국밥, 피자는 성별과 독립이 아니다.
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/housetasks.csv")
data
# 성별과 음식의 독립성을 사후검정결과
# 국밥과 피자는 귀무가설을 기각하며, 마라탕은 대립가설을 기각한다.
# 마라탕과 성별은 독립이며 국밥, 피자는 성별과 독립이 아니다.
cross_tab <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/housetasks.csv")
cross_tab
# 성별과 음식의 독립성을 사후검정결과
# 국밥과 피자는 귀무가설을 기각하며, 마라탕은 대립가설을 기각한다.
# 마라탕과 성별은 독립이며 국밥, 피자는 성별과 독립이 아니다.
cross_tab <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/housetasks.csv")
cross_tab
# 성별과 음식의 독립성을 사후검정결과
# 국밥과 피자는 귀무가설을 기각하며, 마라탕은 대립가설을 기각한다.
# 마라탕과 성별은 독립이며 국밥, 피자는 성별과 독립이 아니다.
cross_tab <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/housetasks.csv",row.names = 1)
cross_tab
results <- chisq.posthoc.test(cross_tab,method = "bonferroni")
results
results$Value
results$Wife
results
chi_square_test_result <-chisq.test(cross_tab)
print(chi_square_test_result)
# 검정결과 귀무가설을 기각하고 대립가설을 채택한다(부부와 집안일은 차이가 있다.)
# 카이제곱 검정의 사후검정
results <- chisq.posthoc.test(cross_tab,method = "bonferroni")
# 검정결과 귀무가설을 기각하고 대립가설을 채택한다(부부와 집안일은 차이가 있다.)
# 카이제곱 검정의 사후검정
##
results <- chisq.posthoc.test(cross_tab,method = "bonferroni")
results
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/국경통과데이터(명목 2).csv", skip = 2)
data
cross_tab <- table(data$Maine, data$US.Canada.Border)
cross_tab
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/전자상거래행동분석(명목형2,연속형1).csv", skip = 2)
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/전자상거래행동분석(명목형 2, 연속형1).csv", skip = 2)
cross_tab <- table(data$Maine, data$US.Canada.Border)
cross_tab
cross_tab <- table(data$Married, data$Bachelor.s)
cross_tab
chi_square_test_result <- chisq.test(cross_tab)
chi_square_test_result <- chisq.test(cross_tab);chi_square_test_result
chi_square_test_result <- chisq.test(cross_tab);chi_square_test_result
## 결혼 상태과 교육 레벨의 카이제곱 검정
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/전자상거래행동분석(명목형 2, 연속형1).csv", skip = 2)
cross_tab <- table(data$Married, data$Bachelor.s)
chi_square_test_result <- chisq.test(cross_tab);chi_square_test_result
cross_tab <- table(data$Married, data$Bachelor.s);cross_tab
chi_square_test_result <- chisq.test(cross_tab);chi_square_test_result
# 사후검정
results <- chisq.posthoc.test(cross_tab,method = "bonferroni")
results
## 결혼 상태과 교육 레벨의 카이제곱 검정
# 귀무가설 : 결혼상태와 교육레벨은 독립이다.
# 대립가설 : 결혼 상태와 교육 레벨은 독립이 아니다.
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/전자상거래행동분석(명목형 2, 연속형1).csv", skip = 2)
cross_tab <- table(data$Married, data$Bachelor.s);cross_tab
chi_square_test_result <- chisq.test(cross_tab);chi_square_test_result
# 사후검정
results <- chisq.posthoc.test(cross_tab,method = "bonferroni")
results
# 귀무가설(변수간의 관계가 독립이다)을 채택하여 사후검정에 의미가 없다.
# 귀무가설(변수간의 관계가 독립이다)을 채택하여 사후검정에 의미가 없다.
# 귀무가설(변수간의 관계가 독립이다)을 채택하여 사후검정에 의미가 없다.
## 결혼 상태과 교육 레벨의 카이제곱 검정
# 귀무가설 : 결혼상태와 교육레벨은 독립이다.
# 대립가설 : 결혼 상태와 교육 레벨은 독립이 아니다.
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/전자상거래행동분석(명목형 2, 연속형1).csv", skip = 2)
cross_tab <- table(data$Married, data$Bachelor.s);cross_tab
chi_square_test_result <- chisq.test(cross_tab);chi_square_test_result
# 사후검정
results <- chisq.posthoc.test(cross_tab,method = "bonferroni")
results
# 귀무가설(변수간의 관계가 독립이다)을 채택하여 사후검정에 의미가 없다.
data <- read..csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/카이제곱문제/color.csv")
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/카이제곱문제/color.csv")
# 과정
# 데이터 로드 -> 적합도 검정 -> 귀무사설 기각, 대립가설을 채택하는가? -> 사후검정
data1 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/카이제곱문제/color.csv")
data_table <- table(data1);data_table
expected<- rep(sum(data_table)/ length(data_table), length(data_table));expected
chi_squared <- chisq.test(x= data_table, p= expected/ sum(expected))
print(chi_squared)
"p-value가 0.05보다 작음으로 대립가설을 채택한다 = 분포의 차이가 일정하지 않다"
std_residuals <- (data_table- expected)/sqrt(expected)
value <- std_residuals^2
p_values <- 1-pchisq(value, df=3)
df<-data.frame
print(df)
df<-data.frame
print(df)
# 문제 2
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/카이제곱문제/ifcafe.csv")
# 문제 2
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/카이제곱문제/incafe.csv")
cross_tab<-table(data$카페분위기, data$만족도)
chi_squared <- chisq.test(cross_tab)
chi_squared
''' 패키지
'''install.packages("chisq.posthoc.test")
install.packages("chisq.posthoc.test")
library(chisq.posthoc.test)
chisq.posthoc.test(cross_tab,method="bonferrno")
chisq.posthoc.test(cross_tab,method = "bonferroni")
'''
install.packages("chisq.posthoc.test")
library(chisq.posthoc.test)
'''
chisq.posthoc.test(cross_tab,method = "bonferroni")
## 5월 14일 학습 내용 정리
# 카이제곱 분포의 독립성 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/smartphone_sleep1.csv")
data
cross_tab<-table(data$스마트폰사용목적, data$수면만족도)
chi_squared <- chisq.test(cross_tab)
cross_tab
cross_tab
chi_squared <- chisq.test(cross_tab)
printf(chi_squared)
print(chi_squared)
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/smartphone_sleep2.csv")
cross_tab<-table(data$스마트폰사용목적, data$수면만족도)
chi_squared<-chisq.test(cross_tab)
print(chi_squared)
## X-squared = 66.85, df = 8, p-value = 2.076e-11
chosq.posthoc.test(cross_tab, method = "bonferroni")
## X-squared = 66.85, df = 8, p-value = 2.076e-11
chisq.posthoc.test(cross_tab, method = "bonferroni")
# f 분포 : 집단의 분산 비율
## n개의 집단간의 분산을 비교하여 일지하는지 확인하는 방법
# 집단의 수가 2개일때 f-test
# 분산의 동질성 검정 : 분산분석(f-tset)
set_a <- c(10.1,10.2,10.3,10.0,10.1,10.2,10.3,10.0,10.1,10.2)
set_b <- c(9.8,10.5,10.2,9.7,10.4,10.3,9.6,10.6,9.9,10.7)
result <- var.test(set_a, set_b)
print(result)
# 단측 검정
var.test(set_a, set_b, alternative = "less")
# 단측 검정 (집단 a는 집단 b의 분산보다 작다)
var.test(set_a, set_b, alternative = "less")
# 단측 검정
var.test(set_a, set_b, alternative = "greater")
# f 분포 : 집단의 분산 비율
## n개의 집단간의 분산을 비교하여 일지하는지 확인하는 방법
# 집단의 수가 2개일때 f-test
# 분산의 동질성 검정 : 분산분석(f-tset)
# 분산 분석의 귀무가설 : 두집단의 분산이 같다, 대립가설 : 두 집단의 분산이 다르다.
# f-test(ex)
set_a <- c(10.1,10.2,10.3,10.0,10.1,10.2,10.3,10.0,10.1,10.2)
set_b <- c(9.8,10.5,10.2,9.7,10.4,10.3,9.6,10.6,9.9,10.7)
# 양측검정
result <- var.test(set_a, set_b)
print(result)
# 단측 검정 (집단 a는 집단 b의 분산보다 작다)
var.test(set_a, set_b, alternative = "less")
# 단측 검정
var.test(set_a, set_b, alternative = "greater")
df= read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/Machine_set.csv")
set_a <- subset(df, machine == 'A')$value
set_b <- subset(df, machine == 'B')$value
result<- var.test(set_a, set_b)
print(result)
var.test(set_a, set_b, alternative = "less")
var.test(set_a, set_b, alternative = "greater")
# 기준 집단에 대하여 복수의 집단들의 분산을 비교한다
set_a <-c(10.2,10.3,10.1,10.0,10.3,10.2,10.1,10.2,10.1,10.3)
set_b <-c(10.1,10.0,10.2,10.3,10.0,10.1,10.2,10.1,10.2,10.1)
set_c <-c(10.2,10.3,10.3,10.3,10.4,10.3,10.2,10.4,10.3,10.4)
var.test(set_b ,set_a,alternative ="less")
var.test(set_c, set_a, alternative = "less")
rkdwn
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 21일 anova/class_scores.csv", stringsAsFactors = TRUE);data
# 아노바분석
anova_result <- aov(Score ~ Class, data = data)
# 분석 결과 출력
summary(anova_result)
# 사후검증 출력
# install.packages("multcomp")
library(multcomp)
tukey_result <- glht(anova_result, linfct = mcp(Class = "Tukey"))
summary(tukey_result)
## 이원 분산분석
grow <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 21일 anova/growth.csv", stringsAsFactors = TRUE);grow
# 이원산분석(독립변수들간에 상호작용 없음)
anova_result<-aov(growth~fertilizer+water, data=grow)
summary(anova_result)
# 이원산 분석(독립변수들간에 사용작용 있음)
anova_result<-aov(growth~fertilizer*water, data=grow)
summary(anova_result)
View(observed)
data = read_csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv")
data = read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv")
data
# 데이터 불러오기
data = read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv");data
aov(ViewerCount ~ ContentType+ThumbnailType+ContentType, data = data)
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+ContentType, data = data)
summary(anova_result)
# 데이터 불러오기
data = read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv",stringsAsFactors = TRUE);data
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+ContentType, data = data)
summary(anova_result)
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
summary(anova_result)
anova_result<-aov(ViewerCount ~ ContentType*ThumbnailType*UploadTime, data = data)
summary(anova_result)
library(multcomp)
library(car)## 등분산 검정
library(rstatix)#games_howell_test : 등분산이 아닐경우 검정
ContentType, data = data)
# 등분산 검정
# p-value<0.05일때 등분산이 아님(games_howell_test() 사용)
leveneTest(ViewerCount~ContentType, data = data)
# ViewerCount와 ContentType는 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(fertilizer = "Tukey"))
anova_result
# ViewerCount와 ContentType는 등분산이다
anova_result<-aov(ViewerCount ~ ContentType, data = data)
tukey_result <- glht(anova_result, linfct = mcp(fertilizer = "Tukey"))
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result
summary(tukey_result)
leveneTest(ViewerCount~ThumbnailType, data = data)
leveneTest(ViewerCount~ThumbnailType, data = data)
leveneTest(ViewerCount~UploadTime, data = data)
# 등분산 검정
# p-value<0.05일때 등분산이 아님(games_howell_test() 사용)
leveneTest(ViewerCount~ContentType, data = data)
leveneTest(ViewerCount~ThumbnailType, data = data)
# ViewerCount와 ThumbnailType는 등분산 관계가 아님(games-howell적용)
leveneTest(ViewerCount~UploadTime, data = data)
anova_result<-aov(ViewerCount ~ UploadTime, data = data)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #독립변수는 등분산이다? 이걸 해야하는가? 언제함?
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
# 등분산 검정
# p-value<0.05일때 등분산이 아님(games_howell_test() 사용)
leveneTest(ViewerCount~ContentType, data = data)
# ViewerCount와 ContentType는 등분산이다
anova_result<-aov(ViewerCount ~ ContentType, data = data)
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
#### ????
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
summary(anova_result)
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #변수 조합은 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
#### ????
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
summary(anova_result)
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #변수 조합은 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
## p-value가 0.05보다 작음으로 종속변수(ViewerCount)와 그 외의 독립변수들은 모두 평균의 차이가 있다.
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #변수 조합은 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
## 독립변수의 조합은 종속변수와 등분산 관계이다.
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
# game > tutorial > review = vlog의 차이로 ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
# ContentType에서는
# game > tutorial > review = vlog의 차이로 ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
# ThumbnailType에서는
# person > product > text 의 차이로  ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
# ThumbnailType에서는
# person > product > text 의 차이로  ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
anova_result<-aov(ViewerCount ~ ContentType*ThumbnailType*UploadTime, data = data)
summary(anova_result)
#### 변수들 간에 평균의 차이가 있는가?
anova_result<-aov(ViewerCount ~ ContentType*ThumbnailType*UploadTime, data = data)
summary(anova_result)
#ex
# 키와 몸무게 데이터 생성
heights <- c(160,162,155,180,170,175,165,171,177,172)
weights <- c(55,60,53,72,70,73,62,64,69,65)
install.packages(psych)
library("psych")
result_pearson = corr.test(heights,, weights, method="peareson")
result_pearson = corr.test(heights, weights, method="peareson")
result_pearson = corr.test(heights, weights, method="pearson")
result_pearson$p
result_pearson$p ## p-value
result_pearson$r ## 상관관계 계수
# 스피어만 상관관계분석
# ex) 학생의 자기 평가와 평가자의 평가(순위형 - 순위형)
s_eval <-c(3,4,2,5,1,4,3,2,5,3)
e_eval <-c(2,5,2,4,1,4,3,2,5,3)
reslut_pearson=corr.test(s_eval, e_eval,method = "spearman")
reslut_pearson$p
reslut_pearson$r
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv")
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv")
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
# 피어슨 상관관계 분석
indep<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var<-data[, "집중력점수", drop = FALSE]
indep
target_var
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson`<-data[, "집중력점수", drop = FALSE]
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
data2
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
c
asdf
exit
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
data
#
$
z
1
223
vbb
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson<-data[, "집중력점수", drop = FALSE]
indep_spearman<- data2[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_spearman<-data2[, "집중력점수", drop = FALSE]
data
;;;
)
]
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
reslut<-corr.test(target_var_peareson,indep_pearson, mathod = "pearson")
reslut<-corr.test(target_var_peareson,indep_pearson, method = "pearson")
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson<-data[, "집중력점수", drop = FALSE]
indep_spearman<- data2[,c("스트레스수준", "자기효능감수준","학교만족도","가족지원수준","소속감수준")]
target_var_spearman<-data2[, "집중력점수", drop = FALSE]
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
target_var_spearman<-data2[, "집중력등급", drop = FALSE]
reslut<-corr.test(target_var_peareson,indep_pearson, method = "pearson")
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson<-data[, "집중력점수", drop = FALSE]
indep_spearman<- data2[,c("스트레스수준", "자기효능감수준","학교만족도","가족지원수준","소속감수준")]
target_var_spearman<-data2[, "집중력등급", drop = FALSE]
reslut<-corr.test(target_var_peareson,indep_pearson, method = "pearson")
result_pearson = corr.test(indep_pearson, target_var_peareson, method="pearson")
result_pearson = corr.test(indep_pearson, target_var_peareson$집중력점수, method="pearson")
result_pearson = corr.test(target_var_peareson$집중력점수,indep_pearson, method="pearson")
result_pearson = corr.test(target_var_peareson$집중력점수,indep_pearson$수면시간, method="pearson")
result_pearson = corr.test(target_var_peareson$집중력점수,indep_pearson$수면시간+indep_pearson$휴대폰사용시간, method="pearson")
