data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 21일 anova/class_scores.csv", stringsAsFactors = TRUE);data
# 아노바분석
anova_result <- aov(Score ~ Class, data = data)
# 분석 결과 출력
summary(anova_result)
# 사후검증 출력
# install.packages("multcomp")
library(multcomp)
tukey_result <- glht(anova_result, linfct = mcp(Class = "Tukey"))
summary(tukey_result)
## 이원 분산분석
grow <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 21일 anova/growth.csv", stringsAsFactors = TRUE);grow
# 이원산분석(독립변수들간에 상호작용 없음)
anova_result<-aov(growth~fertilizer+water, data=grow)
summary(anova_result)
# 이원산 분석(독립변수들간에 사용작용 있음)
anova_result<-aov(growth~fertilizer*water, data=grow)
summary(anova_result)
View(observed)
data = read_csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv")
data = read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv")
data
# 데이터 불러오기
data = read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv");data
aov(ViewerCount ~ ContentType+ThumbnailType+ContentType, data = data)
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+ContentType, data = data)
summary(anova_result)
# 데이터 불러오기
data = read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/5월 26일 test-6/youtube.csv",stringsAsFactors = TRUE);data
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+ContentType, data = data)
summary(anova_result)
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
summary(anova_result)
anova_result<-aov(ViewerCount ~ ContentType*ThumbnailType*UploadTime, data = data)
summary(anova_result)
library(multcomp)
library(car)## 등분산 검정
library(rstatix)#games_howell_test : 등분산이 아닐경우 검정
ContentType, data = data)
# 등분산 검정
# p-value<0.05일때 등분산이 아님(games_howell_test() 사용)
leveneTest(ViewerCount~ContentType, data = data)
# ViewerCount와 ContentType는 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(fertilizer = "Tukey"))
anova_result
# ViewerCount와 ContentType는 등분산이다
anova_result<-aov(ViewerCount ~ ContentType, data = data)
tukey_result <- glht(anova_result, linfct = mcp(fertilizer = "Tukey"))
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result
summary(tukey_result)
leveneTest(ViewerCount~ThumbnailType, data = data)
leveneTest(ViewerCount~ThumbnailType, data = data)
leveneTest(ViewerCount~UploadTime, data = data)
# 등분산 검정
# p-value<0.05일때 등분산이 아님(games_howell_test() 사용)
leveneTest(ViewerCount~ContentType, data = data)
leveneTest(ViewerCount~ThumbnailType, data = data)
# ViewerCount와 ThumbnailType는 등분산 관계가 아님(games-howell적용)
leveneTest(ViewerCount~UploadTime, data = data)
anova_result<-aov(ViewerCount ~ UploadTime, data = data)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #독립변수는 등분산이다? 이걸 해야하는가? 언제함?
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
# 등분산 검정
# p-value<0.05일때 등분산이 아님(games_howell_test() 사용)
leveneTest(ViewerCount~ContentType, data = data)
# ViewerCount와 ContentType는 등분산이다
anova_result<-aov(ViewerCount ~ ContentType, data = data)
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
#### ????
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
summary(anova_result)
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #변수 조합은 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
#### ????
anova_result<-aov(ViewerCount ~ ContentType+ThumbnailType+UploadTime, data = data)
summary(anova_result)
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #변수 조합은 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
## p-value가 0.05보다 작음으로 종속변수(ViewerCount)와 그 외의 독립변수들은 모두 평균의 차이가 있다.
data$group <- interaction(data$ContentType, data$ThumbnailType, data$UploadTime)
leveneTest(ViewerCount~group, data = data) #변수 조합은 등분산이다
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
## 독립변수의 조합은 종속변수와 등분산 관계이다.
tukey_result <- glht(anova_result, linfct = mcp(ContentType = "Tukey"))
summary(tukey_result)
# game > tutorial > review = vlog의 차이로 ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
# ContentType에서는
# game > tutorial > review = vlog의 차이로 ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(ThumbnailType = "Tukey"))
summary(tukey_result)
# ThumbnailType에서는
# person > product > text 의 차이로  ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
# ThumbnailType에서는
# person > product > text 의 차이로  ViewerCount가 발생한다.
tukey_result <- glht(anova_result, linfct = mcp(UploadTime = "Tukey"))
summary(tukey_result)
anova_result<-aov(ViewerCount ~ ContentType*ThumbnailType*UploadTime, data = data)
summary(anova_result)
#### 변수들 간에 평균의 차이가 있는가?
anova_result<-aov(ViewerCount ~ ContentType*ThumbnailType*UploadTime, data = data)
summary(anova_result)
#ex
# 키와 몸무게 데이터 생성
heights <- c(160,162,155,180,170,175,165,171,177,172)
weights <- c(55,60,53,72,70,73,62,64,69,65)
install.packages(psych)
library("psych")
result_pearson = corr.test(heights,, weights, method="peareson")
result_pearson = corr.test(heights, weights, method="peareson")
result_pearson = corr.test(heights, weights, method="pearson")
result_pearson$p
result_pearson$p ## p-value
result_pearson$r ## 상관관계 계수
# 스피어만 상관관계분석
# ex) 학생의 자기 평가와 평가자의 평가(순위형 - 순위형)
s_eval <-c(3,4,2,5,1,4,3,2,5,3)
e_eval <-c(2,5,2,4,1,4,3,2,5,3)
reslut_pearson=corr.test(s_eval, e_eval,method = "spearman")
reslut_pearson$p
reslut_pearson$r
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv")
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv")
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
# 피어슨 상관관계 분석
indep<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var<-data[, "집중력점수", drop = FALSE]
indep
target_var
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson`<-data[, "집중력점수", drop = FALSE]
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
data2
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
c
asdf
exit
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
data
#
$
z
1
223
vbb
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson<-data[, "집중력점수", drop = FALSE]
indep_spearman<- data2[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_spearman<-data2[, "집중력점수", drop = FALSE]
data
;;;
)
]
## 실습
# 상관관계 분석
data <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/pearson.csv");data
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
reslut<-corr.test(target_var_peareson,indep_pearson, mathod = "pearson")
reslut<-corr.test(target_var_peareson,indep_pearson, method = "pearson")
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson<-data[, "집중력점수", drop = FALSE]
indep_spearman<- data2[,c("스트레스수준", "자기효능감수준","학교만족도","가족지원수준","소속감수준")]
target_var_spearman<-data2[, "집중력점수", drop = FALSE]
data2 <- read.csv("C:/Users/rkdwn/Documents/GitHub/Machine-Learning_R_3_1/데이터/spearman/spearman.csv");data2
target_var_spearman<-data2[, "집중력등급", drop = FALSE]
reslut<-corr.test(target_var_peareson,indep_pearson, method = "pearson")
# 피어슨 상관관계 분석
indep_pearson<- data[,c("수면시간", "휴대폰사용시간","카페인섭취량","운동시간")]
target_var_peareson<-data[, "집중력점수", drop = FALSE]
indep_spearman<- data2[,c("스트레스수준", "자기효능감수준","학교만족도","가족지원수준","소속감수준")]
target_var_spearman<-data2[, "집중력등급", drop = FALSE]
reslut<-corr.test(target_var_peareson,indep_pearson, method = "pearson")
result_pearson = corr.test(indep_pearson, target_var_peareson, method="pearson")
result_pearson = corr.test(indep_pearson, target_var_peareson$집중력점수, method="pearson")
result_pearson = corr.test(target_var_peareson$집중력점수,indep_pearson, method="pearson")
result_pearson = corr.test(target_var_peareson$집중력점수,indep_pearson$수면시간, method="pearson")
result_pearson = corr.test(target_var_peareson$집중력점수,indep_pearson$수면시간+indep_pearson$휴대폰사용시간, method="pearson")
data <- c(10, 15, 20, 25, 30, 15, 20, 25, 25, 10)
# find_mode 함수는 R 기본 함수가 아니므로, 실제 사용 시 정의 필요
# mode_value <- find_mode(data)
data.summray
# find_mode 함수는 R 기본 함수가 아니므로, 실제 사용 시 정의 필요
# mode_value <- find_mode(data)
summaray(data)
# find_mode 함수는 R 기본 함수가 아니므로, 실제 사용 시 정의 필요
# mode_value <- find_mode(data)
data.summaray()
# find_mode 함수는 R 기본 함수가 아니므로, 실제 사용 시 정의 필요
# mode_value <- find_mode(data)
data.summaray
# find_mode 함수는 R 기본 함수가 아니므로, 실제 사용 시 정의 필요
# mode_value <- find_mode(data)
summaray(data)
# find_mode 함수는 R 기본 함수가 아니므로, 실제 사용 시 정의 필요
# mode_value <- find_mode(data)
summary(data)
# 데이터프레임 예시
df_example <- data.frame(
numeric_var = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
char_var = c("A", "B", "A", "C", "B", "A", "C", "B", "A", "C")
)
summary(df_example)
# 데이터프레임 예시
df_example <- data.frame(
numeric_var = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
)
summary(df_example)
# 데이터프레임 예시
df_example <- data.frame(
numeric_var = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
)
summary(df_example)
# 1. 예시 데이터 생성
set.seed(123) # 재현성을 위한 시드 설정
data_with_outliers <- c(rnorm(100, mean = 50, sd = 10), 10, 15, 90, 95, 100) # 정규분포 데이터와 이상치 추가
# 2. 박스플롯으로 이상치 시각화
boxplot(data_with_outliers, main = "Boxplot with Outliers", ylab = "Values")
# 3. 사분위수 및 IQR 계산
Q1 <- quantile(data_with_outliers, 0.25)
Q3 <- quantile(data_with_outliers, 0.75)
IQR_val <- Q3 - Q1
# 4. 이상치 경계 계산
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# 5. 이상치 식별
outliers <- data_with_outliers[data_with_outliers < lower_bound | data_with_outliers > upper_bound]
print(paste("식별된 이상치:", paste(outliers, collapse = ", ")))
# 6. 이상치 제거
data_no_outliers <- data_with_outliers[data_with_outliers >= lower_bound & data_with_outliers <= upper_bound]
# 7. 이상치 제거 후 박스플롯으로 확인
boxplot(data_no_outliers, main = "Boxplot without Outliers", ylab = "Values")
# 원본 데이터와 제거된 데이터의 길이 비교
print(paste("원본 데이터 길이:", length(data_with_outliers)))
print(paste("이상치 제거 후 데이터 길이:", length(data_no_outliers)))
# 1. 예시 데이터 생성
set.seed(123) # 재현성을 위한 시드 설정
data_with_outliers <- c(rnorm(100, mean = 50, sd = 10), 10, 15, 90, 95, 100) # 정규분포 데이터와 이상치 추가
# 2. 박스플롯으로 이상치 시각화
boxplot(data_with_outliers, main = "Boxplot with Outliers", ylab = "Values")
# 3. 사분위수 및 IQR 계산
Q1 <- quantile(data_with_outliers, 0.25)
Q3 <- quantile(data_with_outliers, 0.75)
IQR_val <- Q3 - Q1
# 4. 이상치 경계 계산
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# 5. 이상치 식별
outliers <- data_with_outliers[data_with_outliers < lower_bound | data_with_outliers > upper_bound]
print(paste("식별된 이상치:", paste(outliers, collapse = ", ")))
# 6. 이상치 제거
data_no_outliers <- data_with_outliers[data_with_outliers >= lower_bound & data_with_outliers <= upper_bound]
# 7. 이상치 제거 후 박스플롯으로 확인
boxplot(data_no_outliers, main = "Boxplot without Outliers", ylab = "Values")
# 원본 데이터와 제거된 데이터의 길이 비교
print(paste("원본 데이터 길이:", length(data_with_outliers)))
print(paste("이상치 제거 후 데이터 길이:", length(data_no_outliers)))
# 1. 예시 데이터 생성
set.seed(123) # 재현성을 위한 시드 설정
data_with_outliers <- c(rnorm(100, mean = 50, sd = 10), 10, 15, 90, 95, 100) # 정규분포 데이터와 이상치 추가
# 2. 박스플롯으로 이상치 시각화
boxplot(data_with_outliers, main = "Boxplot with Outliers", ylab = "Values")
# 3. 사분위수 및 IQR 계산
Q1 <- quantile(data_with_outliers, 0.25)
Q3 <- quantile(data_with_outliers, 0.75)
IQR_val <- Q3 - Q1
# 4. 이상치 경계 계산
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# 5. 이상치 식별
outliers <- data_with_outliers[data_with_outliers < lower_bound | data_with_outliers > upper_bound]
print(paste("식별된 이상치:", paste(outliers, collapse = ", ")))
# 6. 이상치 제거
data_no_outliers <- data_with_outliers[data_with_outliers >= lower_bound & data_with_outliers <= upper_bound]
# 7. 이상치 제거 후 박스플롯으로 확인
boxplot(data_no_outliers, main = "Boxplot without Outliers", ylab = "Values")
# 원본 데이터와 제거된 데이터의 길이 비교
print(paste("원본 데이터 길이:", length(data_with_outliers)))
# 필요한 라이브러리 로드
library(ggplot2)
# 1. 박스는 좁고 수염은 긴 데이터 생성 예시
# 대부분의 데이터는 50~60 사이에 집중
set.seed(123) # 재현성을 위한 시드 설정
data_narrow_box_long_whiskers <- c(
rnorm(100, mean = 55, sd = 2), # 중앙에 밀집된 데이터 (100개)
rnorm(10, mean = 20, sd = 5),  # 아래쪽으로 멀리 떨어진 데이터 (10개)
rnorm(10, mean = 90, sd = 5)   # 위쪽으로 멀리 떨어진 데이터 (10개)
)
# 2. 데이터 확인 (기술 통계량으로 대략적인 분포 파악)
summary(data_narrow_box_long_whiskers)
# 3. 박스플롯 시각화 (ggplot2 사용)
ggplot(data.frame(Value = data_narrow_box_long_whiskers), aes(y = Value)) +
geom_boxplot(fill = "skyblue", color = "darkblue", outlier.colour = "red", outlier.shape = 8, outlier.size = 3) +
labs(
title = "박스는 좁고 수염은 긴 박스플롯 예시",
subtitle = "중앙 데이터는 밀집, 극단 데이터는 넓게 분포",
y = "값"
) +
theme_minimal() + # 깔끔한 테마 적용
theme(plot.title = element_text(hjust = 0.5, face = "bold"), # 제목 가운데 정렬 및 굵게
plot.subtitle = element_text(hjust = 0.5)) # 부제목 가운데 정렬
# 4. 박스 높이(IQR) 및 수염 경계 값 계산 (선택 사항: 시각화된 내용 이해를 돕기 위함)
Q1 <- quantile(data_narrow_box_long_whiskers, 0.25)
Q3 <- quantile(data_narrow_box_long_whiskers, 0.75)
Median <- median(data_narrow_box_long_whiskers)
IQR_val <- Q3 - Q1
lower_fence <- Q1 - 1.5 * IQR_val
upper_fence <- Q3 + 1.5 * IQR_val
# 이상치에 해당하지 않는 데이터 중 최솟값/최댓값
actual_lower_whisker_end <- min(data_narrow_box_long_whiskers[data_narrow_box_long_whiskers >= lower_fence])
actual_upper_whisker_end <- max(data_narrow_box_long_whiskers[data_narrow_box_long_whiskers <= upper_fence])
cat("--- 데이터 통계량 --- \n")
cat(paste0("Q1 (1사분위수): ", round(Q1, 2), "\n"))
cat(paste0("중앙값 (Q2): ", round(Median, 2), "\n"))
cat(paste0("Q3 (3사분위수): ", round(Q3, 2), "\n"))
cat(paste0("IQR (Q3 - Q1): ", round(IQR_val, 2), "\n"))
cat(paste0("하한 울타리 (Q1 - 1.5*IQR): ", round(lower_fence, 2), "\n"))
cat(paste0("상한 울타리 (Q3 + 1.5*IQR): ", round(upper_fence, 2), "\n"))
cat(paste0("실제 하단 수염 끝 (이상치 제외 최솟값): ", round(actual_lower_whisker_end, 2), "\n"))
cat(paste0("실제 상단 수염 끝 (이상치 제외 최댓값): ", round(actual_upper_whisker_end, 2), "\n"))
cat("-------------------- \n")
# 필요한 라이브러리 로드
library(ggplot2)
# 1. 박스는 좁고 수염은 긴 데이터 생성 예시 (이상치 최소화)
# 대부분의 데이터는 50~60 사이에 집중
set.seed(456) # 재현성을 위한 새로운 시드 설정
data_narrow_box_long_whiskers_no_outliers <- c(
rnorm(200, mean = 55, sd = 2), # 중앙에 매우 밀집된 데이터 (200개)
rnorm(20, mean = 40, sd = 3),  # 아래쪽으로 Q1-1.5*IQR 안에 들어오는 데이터 (20개)
rnorm(20, mean = 70, sd = 3)   # 위쪽으로 Q3+1.5*IQR 안에 들어오는 데이터 (20개)
)
# 2. 박스플롯 시각화 (ggplot2 사용)
ggplot(data.frame(Value = data_narrow_box_long_whiskers_no_outliers), aes(y = Value)) +
geom_boxplot(fill = "lightgreen", color = "darkgreen", outlier.colour = "red", outlier.shape = 8, outlier.size = 3) +
labs(
title = "박스는 좁고 수염은 긴 박스플롯 예시 (이상치 최소화)",
subtitle = "중앙 데이터는 밀집, 나머지 데이터는 넓게 분포하지만 이상치는 아님",
y = "값"
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
# 3. 박스 높이(IQR) 및 수염 경계 값 계산 (시각화된 내용 이해를 돕기 위함)
Q1 <- quantile(data_narrow_box_long_whiskers_no_outliers, 0.25)
Q3 <- quantile(data_narrow_box_long_whiskers_no_outliers, 0.75)
Median <- median(data_narrow_box_long_whiskers_no_outliers)
IQR_val <- Q3 - Q1
lower_fence <- Q1 - 1.5 * IQR_val
upper_fence <- Q3 + 1.5 * IQR_val
# 실제 수염 끝 값 (이상치에 해당하지 않는 데이터 중 최솟값/최댓값)
actual_lower_whisker_end <- min(data_narrow_box_long_whiskers_no_outliers[data_narrow_box_long_whiskers_no_outliers >= lower_fence])
actual_upper_whisker_end <- max(data_narrow_box_long_whiskers_no_outliers[data_narrow_box_long_whiskers_no_outliers <= upper_fence])
cat("--- 데이터 통계량 --- \n")
cat(paste0("Q1 (1사분위수): ", round(Q1, 2), "\n"))
cat(paste0("중앙값 (Q2): ", round(Median, 2), "\n"))
cat(paste0("Q3 (3사분위수): ", round(Q3, 2), "\n"))
cat(paste0("IQR (Q3 - Q1): ", round(IQR_val, 2), "\n"))
cat(paste0("하한 울타리 (Q1 - 1.5*IQR): ", round(lower_fence, 2), "\n"))
cat(paste0("상한 울타리 (Q3 + 1.5*IQR): ", round(upper_fence, 2), "\n"))
cat(paste0("실제 하단 수염 끝 (이상치 제외 최솟값): ", round(actual_lower_whisker_end, 2), "\n"))
cat(paste0("실제 상단 수염 끝 (이상치 제외 최댓값): ", round(actual_upper_whisker_end, 2), "\n"))
cat("-------------------- \n")
rep(1/6, 6)
# (실제 CSV 파일로 저장 및 로드하는 것을 가정하지만, 여기서는 직접 생성)
data_independence <- data.frame(
Gender = c(rep("남자", 45), rep("남자", 55), rep("여자", 60), rep("여자", 40)),
Preference = c(rep("선호", 45), rep("비선호", 55), rep("선호", 60), rep("비선호", 40))
)
# 데이터프레임의 범주형 변수를 사용하여 교차표 생성
contingency_table_independence <- table(data_independence$Gender, data_independence$Preference)
print("--- 독립성 검정 교차표 ---")
print(contingency_table_independence)
data_independence
print(contingency_table_independence)
# 카이제곱 독립성 검정 수행
# chisq.test() 함수에 교차표를 직접 전달
chi_sq_independence_result <- chisq.test(contingency_table_independence)
print("--- 독립성 검정 결과 ---")
print(chi_sq_independence_result)
# 결과 해석 예시:
if (chi_sq_independence_result$p.value < 0.05) {
print("p-value가 0.05보다 작으므로, 성별과 음료 선호도는 통계적으로 유의미한 연관성이 있습니다.")
} else {
print("p-value가 0.05보다 크므로, 성별과 음료 선호도 사이에 통계적으로 유의미한 연관성을 찾기 어렵습니다.")
}
observed_counts_gof <- c(120, 80, 100)
names(observed_counts_gof) <- c("메스꺼움", "두통", "피로") # 시각적 이해를 돕기 위한 이름
# 우리가 기대하는 비율 (모든 증상이 동일한 비율로 나타날 것이라는 귀무가설)
# 전체 환자 수 300명에 대해 각 증상이 100명씩 나타날 것으로 기대.
# 따라서 각 증상별 기대 확률은 1/3 (0.333...)
expected_probabilities_gof <- rep(1/3, length(observed_counts_gof))
print("--- 적합도 검정 관측 빈도 ---")
print(observed_counts_gof)
print("--- 적합도 검정 기대 확률 (귀무가설) ---")
print(expected_probabilities_gof)
# 카이제곱 적합도 검정 수행
# chisq.test() 함수에 관측 빈도 벡터와 기대 확률 p를 전달
chi_sq_gof_result <- chisq.test(x = observed_counts_gof, p = expected_probabilities_gof)
print("--- 적합도 검정 결과 ---")
print(chi_sq_gof_result)
# 결과 해석 예시:
if (chi_sq_gof_result$p.value < 0.05) {
print("p-value가 0.05보다 작으므로, 부작용 발생 비율이 동일하다는 귀무가설을 기각합니다. 즉, 증상들은 동일한 비율로 발생하지 않습니다.")
} else {
print("p-value가 0.05보다 크므로, 부작용 발생 비율이 동일하다는 귀무가설을 기각할 수 없습니다. 즉, 증상들은 동일한 비율로 발생한다고 볼 수 있습니다.")
}
# 1. 원본 데이터프레임 형태 (가장 일반적인 경우)
# 실제 CSV 파일에서 read.csv로 로드하면 이 형태가 됩니다.
data_df <- data.frame(
Gender = factor(c(rep("Male", 45), rep("Male", 55), rep("Female", 60), rep("Female", 40))),
Preference = factor(c(rep("Like", 45), rep("Dislike", 55), rep("Like", 60), rep("Dislike", 40)))
)
# 각 행이 한 명의 응답자를 의미하도록 확장 (chisq.test(Gender, Preference)에서 필요)
# 위 데이터는 요약된 빈도표이므로, 실제 개별 응답자 데이터프레임으로 변환
expanded_data_df <- data.frame(
Gender = c(rep("Male", 45), rep("Male", 55), rep("Female", 60), rep("Female", 40)),
Preference = c(rep("Like", 45), rep("Dislike", 55), rep("Like", 60), rep("Dislike", 40))
)
expanded_data_df$Gender <- factor(expanded_data_df$Gender)
expanded_data_df$Preference <- factor(expanded_data_df$Preference)
# 예시 데이터 (expanded_data_df 사용)
print("--- 독립성 검정 (두 벡터 전달) ---")
result_vector <- chisq.test(expanded_data_df$Gender, expanded_data_df$Preference)
print(result_vector)
cat("\n")
# 예시 데이터 (contingency_table 사용)
print("--- 독립성 검정 (table 객체 전달) ---")
result_table_object <- chisq.test(contingency_table)
print(result_table_object)
cat("\n")
# 예시 데이터 (contingency_table을 행렬로 변환)
matrix_data <- as.matrix(contingency_table)
# 1. 원본 데이터프레임 형태 (가장 일반적인 경우)
# 실제 CSV 파일에서 read.csv로 로드하면 이 형태가 됩니다.
data_df <- data.frame(
Gender = factor(c(rep("Male", 45), rep("Male", 55), rep("Female", 60), rep("Female", 40))),
Preference = factor(c(rep("Like", 45), rep("Dislike", 55), rep("Like", 60), rep("Dislike", 40)))
)
# 각 행이 한 명의 응답자를 의미하도록 확장 (chisq.test(Gender, Preference)에서 필요)
# 위 데이터는 요약된 빈도표이므로, 실제 개별 응답자 데이터프레임으로 변환
expanded_data_df <- data.frame(
Gender = c(rep("Male", 45), rep("Male", 55), rep("Female", 60), rep("Female", 40)),
Preference = c(rep("Like", 45), rep("Dislike", 55), rep("Like", 60), rep("Dislike", 40))
)
expanded_data_df$Gender <- factor(expanded_data_df$Gender)
expanded_data_df$Preference <- factor(expanded_data_df$Preference)
# 2. 교차표 (Contingency Table) 형태
# table() 함수나 matrix() 함수로 직접 생성할 수 있습니다.
# row: Gender, col: Preference
contingency_table <- as.table(matrix(c(45, 55, 60, 40), nrow = 2, byrow = TRUE,
dimnames = list(Gender = c("Male", "Female"),
Preference = c("Like", "Dislike"))))
# 예시 데이터 (expanded_data_df 사용)
print("--- 독립성 검정 (두 벡터 전달) ---")
result_vector <- chisq.test(expanded_data_df$Gender, expanded_data_df$Preference)
print(result_vector)
cat("\n")
# 예시 데이터 (contingency_table 사용)
print("--- 독립성 검정 (table 객체 전달) ---")
result_table_object <- chisq.test(contingency_table)
print(result_table_object)
cat("\n")
# 예시 데이터 (contingency_table을 행렬로 변환)
matrix_data <- as.matrix(contingency_table)
print("--- 독립성 검정 (행렬 전달) ---")
print(matrix_data)
result_matrix <- chisq.test(matrix_data)
print(result_matrix)
cat("\n")
expanded_data_df
